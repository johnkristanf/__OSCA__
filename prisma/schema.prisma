// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id @default(cuid())
  name     String?
  username String    @unique
  email    String    @unique
  password String
  sessions Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("session")
}

// SENIOR TABLE SCHEMA
model Senior {
  id         Int      @id @default(autoincrement())
  lastname   String
  firstname  String
  middlename String? // nullable
  email      String? // nullable
  barangay   String
  purok      String
  gender     Gender
  birthdate  DateTime
  age        String
  contact_no String
  remarks_id Int      @default(1)
  remarks    Remarks  @relation(fields: [remarks_id], references: [id], onDelete: NoAction)

  documents    RegistrationDocument[] // ONE SENIOR COULD HAVE MANY REGISTRATION DOCUMENTS
  Applications Applications[] // ONE SENIOR COULD HAVE MANY APPLICATIONS

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("senior")
}

// REGISTRATION DOCUMENT TABLE SCHEMA
model RegistrationDocument {
  id         Int      @id @default(autoincrement())
  tag        String
  path       String
  file_name  String
  seniors_id Int
  senior     Senior   @relation(fields: [seniors_id], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("registration_document")
}

// REMARKS TABLE SCHEMA
model Remarks {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  seniors   Senior[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("remarks")
}



// ------------------------------------ UNMIGRATED TABLES BELOW ---------------------------

// REMARKS TABLE SCHEMA
model Status {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  applications Applications[] // ONE STATUS CAN BE USE IN MANY APPLICATIONS
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@map("status")
}

// BENEFIT TABLE SCHEMA
model Benefits {
  id           Int            @id @default(autoincrement())
  name         String
  tag         String
  applications Applications[] // ONE BENEFIT CAN BE USED IN MANY APPLICATIONS

  @@map("benefits")

}

// APPLICATIONS TABLE SCHEMA
model Applications {
  id         Int @id @default(autoincrement())
  benefit_id Int
  senior_id  Int
  status_id  Int

  senior  Senior  @relation(fields: [senior_id], references: [id], onDelete: Cascade)
  benefit Benefits @relation(fields: [benefit_id], references: [id])
  status  Status  @relation(fields: [status_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([senior_id])
  @@index([benefit_id])
  @@index([status_id])
  @@map("applications")
}

enum Gender {
  male
  female
}
